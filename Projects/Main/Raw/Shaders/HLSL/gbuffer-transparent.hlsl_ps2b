#include "common.hlsl_psh"

sampler AlbedoSampler	: register(s0);
sampler NormalSampler	: register(s1);
sampler SpecSampler		: register(s2);

float4	Highlight;	// Set from code. Linear space. RGB is multiplicative to albedo and A is additive to emissive.

static float4x4 Thresholds =
{
	1.0f  / 17.0f,	9.0f  / 17.0f,	3.0f  / 17.0f,	11.0f / 17.0f,
	13.0f / 17.0f,	5.0f  / 17.0f,	15.0f / 17.0f,	7.0f  / 17.0f,
	4.0f  / 17.0f,	12.0f / 17.0f,	2.0f  / 17.0f,	10.0f / 17.0f,
	16.0f / 17.0f,	8.0f  / 17.0f,	14.0f / 17.0f,	6.0f  / 17.0f,
};

struct PS_INPUT 
{
	float2	UV			: TEXCOORD0;
	float4	PositionWS	: TEXCOORD1;
	float4	PositionSS	: TEXCOORD2;
	float4	PixelPos	: TEXCOORD3;
	float3	NormalWS	: TEXCOORD4;
	float4	TangentWS	: TEXCOORD5;
};

struct PS_OUTPUT
{
	float4	Normal	: COLOR0;
	float4	Albedo	: COLOR1;
	float4	Depth	: COLOR2;
};

PS_OUTPUT Main( PS_INPUT In )
{
	PS_OUTPUT Out;

	// Spec map surface notes:
	// SpecMap.r: reflectance (diffuse-specular and ambient-cubemap lerp)
	// SpecMap.g: smoothness (specular power, mapped to [0,1])
	// SpecMap.b: emissive
	// SpecMap.a: metal/dielectric (binary)
	
	// G-buffer notes:
	// Normal.r: stereographic normal X
	// Normal.g: stereographic normal Y
	// Normal.b: smoothness + normal Z sign
	// Normal.a: reflectance + metal/dielectric
	
	// Renormalize normal and tangent before creating TBN matrix
	const float3	Normal		= In.NormalWS;		// HACKHACK: Skipping normalization to save instructions
	const float3	Tangent		= In.TangentWS.xyz;	// HACKHACK: Skipping normalization to save instructions
	const float3	Bitangent	= GetBitangent( Normal, Tangent, In.TangentWS.w );
	const float4x4	InvTBN		= GetInverseTBNMatrix( Tangent, Bitangent, Normal );

	const float4	BaseColor	= SampleSRGBToLinear( AlbedoSampler, In.UV );	// DLP 12 Aug 2020: Used to be SampleSRGBToLinearCheap, I think I can afford it now

	// DLP 12 Aug 2020: I think I can afford the proper way now
	const float3	NormalMapTS	= SampleNormal( NormalSampler, In.UV );
	const float3	NormalMapWS	= mul( float4( NormalMapTS, 0.0f ), InvTBN ).xyz;

	// HACKHACK to save ops by combining the mad for normal and dielectric
	// (Also doing cheaper unnormalized normal map sampling)
	//const float4	NormalMap	= tex2D( NormalSampler, In.UV );
	//const float4	SpecMap		= tex2D( SpecSampler, In.UV );
	//const float4	NormalDiel	= float4( NormalMap.rgb, SpecMap.a ) * 2.0f - 1.0f;
	//const float3	NormalMapWS	= mul( float4( NormalDiel.xyz, 0.0f ), InvTBN ).xyz;
	
	const float3	View		= normalize( In.PositionWS.xyz - EyePosition.xyz );
	// ROSANOTE: I *do* need to saturate the dot product here, because normal map can cause rear-facing normals.
	const float		Fresnel		= pow( saturate( 1.0f + dot( NormalMapWS, View ) ), 5.0f );
	const float		Alpha		= lerp( BaseColor.a, 1.0f, Fresnel );

	// Fix PixelPos and mod for the Bayer matrix
	const float2	PixelPos	= ( In.PixelPos.xy / In.PixelPos.w ) % 4;
	clip( Alpha - Thresholds[ PixelPos.x ][ PixelPos.y ] );

	const float4	SpecMap		= tex2D( SpecSampler, In.UV );
	const float2	ReflSmooth	= Pack( float2( SpecMap.r, SpecMap.g * SpecMap.g ) );	// Square for perceptually linear smoothness. ROSAHACK: Pack because we need these to be non-zero for multiplying with sign bits.
	const float		Emissive	= Pack( SpecMap.b + Highlight.a );	// Pack for multiplying with skin bit
	const float		Dielectric	= SpecMap.a * 2.0f - 1.0f;	// ROSANOTE: Dielectric/metal is binary. -1 if metal, 1 if dielectric.

	//const float3	RfSmEm		= Pack( float3( SpecMap.r, SpecMap.g * SpecMap.g, SpecMap.b ) );
	const float		Depth		= In.PositionSS.z / In.PositionSS.w;

	const float		NormalZSign	= NonZeroSign( NormalMapWS.z );
	//const float4	NormalPack	= float4( GetStereographicProjection( NormalMapWS ), NormalZSign * RfSmEm.y, NormalDiel.a * RfSmEm.x ) * 0.5f + 0.5f;
	//const float4	AlbedoPack	= float4( BaseColor.rgb, RfSmEm.z * 0.5f + 0.5f );
	const float4	NormalPack	= float4( GetStereographicProjection( NormalMapWS ), NormalZSign * ReflSmooth.y, Dielectric * ReflSmooth.x ) * 0.5f + 0.5f;
	const float4	AlbedoPack	= float4( BaseColor.rgb, Emissive * 0.5f + 0.5f );	// Emissive also stores skin bit (-1 if skin, 1 if not skin; this shader never emits skin)

	Out.Normal	= NormalPack;
	Out.Albedo	= AlbedoPack;
	Out.Depth	= float4( Depth, Depth, Depth, Depth );
	
	return Out;
}