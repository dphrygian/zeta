#include "common.hlsl_psh"

sampler AlbedoSampler	: register(s0);
sampler NormalASampler	: register(s1);
sampler NormalBSampler	: register(s2);
sampler FlowSampler		: register(s3);

float4	Highlight;	// Set from code. Linear space. RGB is multiplicative to albedo and A is additive to emissive.
float4	WaterPhase;	// x = layer 1 phase, y = layer 2 phase, z = layer blend

// Hard-coded params (TODO: Unify with gbuffer-water!)
// DLP May 31 2021: Blending all of these required disabling Highlight stuff to fit instruction limits.
// I can't imagine a case I'd use water flow with frob highlights, so that's probably fine?
static const float	skReflectanceWet		= 0.10f;
static const float	skReflectanceDry		= 0.05f;
static const float	skSmoothnessWet			= 1.00f;
static const float	skSmoothnessDry			= 0.60f;
static const float	skEmissive				= 0.00f;
static const float	skDielectric			= 1.00f;	// ROSANOTE: Dielectric/metal is binary. -1 if metal, 1 if dielectric. Always using SpecMapWet since they should be the same anyway.
static const float	skWaterDepthWet			= -0.2f;	// Scalar on faked refraction; negative should produce "more correct" refraction (it's fake anyway, ignores viewing angle incidence)
static const float	skWaterDepthDry			= 0.0f;
static const float3	skReflSmoothDepthWet	= float3( Pack( float2( skReflectanceWet, skSmoothnessWet * skSmoothnessWet ) ), skWaterDepthWet );	// Square for perceptually linear smoothness. ROSAHACK: Pack because we need these to be non-zero for multiplying with sign bits.
static const float3	skReflSmoothDepthDry	= float3( Pack( float2( skReflectanceDry, skSmoothnessDry * skSmoothnessDry ) ), skWaterDepthDry );	// Square for perceptually linear smoothness. ROSAHACK: Pack because we need these to be non-zero for multiplying with sign bits.

struct PS_INPUT 
{
	float2	UV			: TEXCOORD0;
	float4	PositionSS	: TEXCOORD1;
	float3	NormalWS	: TEXCOORD2;
	float4	TangentWS	: TEXCOORD3;
};

struct PS_OUTPUT
{
	float4	Normal	: COLOR0;
	float4	Albedo	: COLOR1;
	float4	Depth	: COLOR2;
};

PS_OUTPUT Main( PS_INPUT In )
{
	PS_OUTPUT Out;

	// Renormalize normal and tangent before creating TBN matrix
	const float3	Normal		= normalize( In.NormalWS );
	const float3	Tangent		= normalize( In.TangentWS.xyz );
	const float3	Bitangent	= GetBitangent( Normal, Tangent, In.TangentWS.w );
	const float4x4	InvTBN		= GetInverseTBNMatrix( Tangent, Bitangent, Normal );

	// Flow texture:
	// r = x flow (0 is full negative flow, 128 is still, 255 is full positive flow)
	// g = y flow (same as above, where "positive" flow is downward on the texture)
	// b = depth (0 is "dry", 1 is "wet")
	// NOTE: I also tried multiplying in a deep water color based on wetness, but
	// it looked a lot worse than the authored water texture, and the effect of a
	// dry to wet transition is lost anyway because the usual surface normals (and
	// the edge shader results they'd create) aren't present on water flow surfaces.
	const float		FlowScale	= 1.0f / 4.0f;
	const float3	Flow		= tex2D( FlowSampler, In.UV * FlowScale ).xyz - float3( 0.5f, 0.5f, 0.0f );
	const float2	FlowUV		= -Flow.xy;	// Negative so that a positive value in the flow map creates the intended result when added to the UV. Slightly unintuitive.
	const float		Wetness		= Flow.z;

	const float3	NormalATS	= SampleNormal( NormalASampler, In.UV + ( WaterPhase.x * FlowUV.xy ) );
	const float3	NormalBTS	= SampleNormal( NormalBSampler, In.UV + ( WaterPhase.y * FlowUV.xy ) );
	const float3	NormalMapTS	= normalize( lerp( NormalATS, NormalBTS, WaterPhase.z ) );
	const float3	NormalMapWS	= mul( float4( NormalMapTS, 0.0f ), InvTBN ).xyz;

	const float3	ReflSmoothDepth	= lerp( skReflSmoothDepthDry, skReflSmoothDepthWet, Wetness );
	const float3	Albedo		= SampleSRGBToLinear( AlbedoSampler, In.UV + ReflSmoothDepth.z * NormalMapTS.xy ).rgb /** Highlight.rgb*/;

	const float		Emissive	= Pack( skEmissive /*+ Highlight.a*/ );	// Pack for multiplying with skin bit

	const float		Depth		= In.PositionSS.z / In.PositionSS.w;

	const float		NormalZSign	= NonZeroSign( NormalMapWS.z );
	const float4	NormalPack	= float4( GetStereographicProjection( NormalMapWS ), NormalZSign * ReflSmoothDepth.y, skDielectric * ReflSmoothDepth.x ) * 0.5f + 0.5f;
	const float4	AlbedoPack	= float4( Albedo, Emissive * 0.5f + 0.5f );	// Emissive also stores skin bit (-1 if skin, 1 if not skin; this shader never emits skin)

	Out.Normal	= NormalPack;
	Out.Albedo	= AlbedoPack;
	Out.Depth	= float4( Depth, Depth, Depth, Depth );
	
	return Out;
}