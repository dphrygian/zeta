// ROSANOTE: I've renamed variables in this header to clarify that what used
// to be called "depth" was not z/w but actually distance from the view position.

row_major float4x4	FogColors;			// Set from code, ordered near-lo/far-lo/near-hi/far-hi
float4				FogNearFarCurve;	// Set from code: x = near point, y = far point (unused), z = 1/(y-x), w = exponent
float4				FogLoHiCurve;		// Set from code: x = lo point, y = fog height exp (HACKHACK: added in here because hi point is unused), z = 1/(hi point-x), w = exponent
float4				FogParams;			// Set from code: x = near, y = 1/(far-near), z = emissive scalar (hack for light-combine shader), w = exposure (hack for light-combine shader)
float4				HeightFogParams;	// Set from code: x = low fog height, y = 1/fog height range, z = low fog exponent, w = high fog exponent
float4				RegionFogScalar;	// Set from code: linear space multiplier on fog color/opacity

// Scales and clamps distance to 0..1 based on clip planes in FogParams
float ScaleDistance( const float InDistance )
{
	const float ScaledDistance = ( InDistance - FogParams.x ) * FogParams.y;
	return saturate( ScaledDistance );
}

// Also applies height fog params on top of ScaleDistance
// Requires linear distance and world space Z
float GetFogT( const float Distance, const float WSZ )
{
	const float	FogHeight	= pow( saturate( ( WSZ - HeightFogParams.x ) * HeightFogParams.y ), FogLoHiCurve.y );
	const float	FogExponent	= lerp( HeightFogParams.z, HeightFogParams.w, FogHeight );

	return pow( ScaleDistance( Distance ), FogExponent );
}

// NOTE: Mirrored in RosaWorld::SampleFog()
float4 SampleFog( const float NearFar, const float LoHi )
{
	const float		NearFarAlpha	= pow( saturate( ( NearFar -	FogNearFarCurve.x ) *	FogNearFarCurve.z ),	FogNearFarCurve.w );
	const float		LoHiAlpha		= pow( saturate( ( LoHi -		FogLoHiCurve.x ) *		FogLoHiCurve.z ),		FogLoHiCurve.w );
	const float4	FogLo			= lerp( FogColors[0], FogColors[1], NearFarAlpha );
	const float4	FogHi			= lerp( FogColors[2], FogColors[3], NearFarAlpha );
	const float4	Fog				= lerp( FogLo, FogHi, LoHiAlpha );

	return Fog;
}

float4 GetFogAtDistance( const float Distance, const float SunTerm )
{
	const float4	GlobalFog	= SampleFog( Distance, SunTerm );
	const float4	RegionFog	= GlobalFog * RegionFogScalar;

	return RegionFog;
}

float4 GetFog_Deferred( const float Distance, const float WSZ, const float SunTerm )
{
	const float	FogT	= GetFogT( Distance, WSZ );

	return GetFogAtDistance( FogT, SunTerm );
}

float4 BlendFog( const float4 FogValue, const float4 Color )
{
	const float		FogAlpha		= FogValue.a;
	const float4	FogColor		= float4( FogValue.rgb, Color.a );
	const float4	BlendedColor	= lerp( Color, FogColor, FogAlpha );

	return BlendedColor;
}