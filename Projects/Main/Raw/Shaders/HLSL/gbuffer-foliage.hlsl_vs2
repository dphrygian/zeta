#include "common.hlsl_vsh"
#include "foliage.hlsl_vsh"

struct VS_INPUT 
{
	float4 Position	: POSITION;
	float3 Normal	: NORMAL;		// Actual geometry normal
	float3 NormalB	: TEXCOORD2;	// Bent normal for foliage shading
	float4 Tangent	: TANGENT;
	float2 UV		: TEXCOORD0;
	float4 Color	: TEXCOORD1;
};

struct VS_OUTPUT
{
	float4	Position	: POSITION;
	float2	UV			: TEXCOORD0;
	float4	PositionSS	: TEXCOORD1;
	float3	NormalWS	: TEXCOORD2;
	float4	TangentWS	: TEXCOORD3;
};

VS_OUTPUT Main( VS_INPUT In )
{
	VS_OUTPUT Out;

	const float4	PositionWS		= mul( In.Position, WorldMatrix );
	const float4	FoliagePosition	= GetFoliagePosition( PositionWS, In.Normal, In.Color );
	const float3	ToEye			= normalize( EyePosition.xyz - FoliagePosition.xyz );

	Out.Position	= FixHalfPixelOffset( mul( FoliagePosition, VP ) );
	Out.UV			= In.UV;
	Out.PositionSS	= Out.Position;
	
	// Using geometric normals
	//Out.NormalWS	= mul( float4( In.Normal, 0.0f ), WorldMatrix ).xyz;

	// Using bent normals
	//Out.NormalWS	= mul( float4( In.NormalB, 0.0f ), WorldMatrix ).xyz;

	// Using bent normals and bending further toward camera to reduce Fresnel
	Out.NormalWS	= normalize( ToEye + mul( float4( In.NormalB, 0.0f ), WorldMatrix ).xyz );
	
	// ONLY using the bent normal to the camera
	//Out.NormalWS	= ToEye;

	// NOTE: I'm still just using the original tangent regardless here; looking at MeshCompiler,
	// the tangent and bitangent are based on geometric normals, not bent normals. I guess
	// that's not a huge problem if I've never noticed it before. This means normal maps on
	// foliage will probably not work correctly, so... don't use them.
	Out.TangentWS	= float4( mul( float4( In.Tangent.xyz, 0.0f ), WorldMatrix ).xyz, In.Tangent.w );

	return Out;
}
