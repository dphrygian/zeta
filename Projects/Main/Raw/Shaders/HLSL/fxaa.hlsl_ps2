#include "common.hlsl_psh"

// Based on NVIDIA FXAA 3.11 by TIMOTHY LOTTES
// COPYRIGHT (C) 2010, 2011 NVIDIA CORPORATION. ALL RIGHTS RESERVED.

// x = 1/width, y = 1/height, z = 0.5/width, w = 0.5/height
float4 RTDims;
// x = -1/width, y = -1/height, z = 1/width, w = 1/height
float4 RTDims2;

static const float SubpixelN		= 0.33f;	// Ranges from 0.5 (default) to 0.33 (sharper)
static const float EdgeSharpness	= 8.0f;		// Ranges from 8.0 (sharper, default) to 2.0 (really soft)
static const float EdgeThreshold	= 0.125f;	// Ranges from 0.125 (less aliasing, softer, default) to 0.25 (more aliasing, sharper)
static const float EdgeThresholdMin	= 0.05f;	// Ranges from 0.06 (faster, more aliasing in darks) to 0.04 (slower, less aliasing in darks). Default 0.05.

float GetLuma( const float4 Color )
{
	return Color.a;
}

#define FxaaTexTop(t, p) tex2D(t, p)
#define FxaaTexOff(t, p, o, r) tex2D(t, p + (o * r))

float4 FxaaPixelShader( float2 pos, sampler tex, float2 RcpFrame, float4 RcpFrameOpt, float4 RcpFrameOpt2 )
{
	float lumaNw = GetLuma(FxaaTexOff(tex, pos, float2(-1,-1), RcpFrame.xy));
	float lumaSw = GetLuma(FxaaTexOff(tex, pos, float2(-1, 1), RcpFrame.xy));
	float lumaNe = GetLuma(FxaaTexOff(tex, pos, float2( 1,-1), RcpFrame.xy));
	float lumaSe = GetLuma(FxaaTexOff(tex, pos, float2( 1, 1), RcpFrame.xy));

	float4 rgbyM = FxaaTexTop(tex, pos.xy);
	float lumaM = rgbyM.w;

	float lumaMaxNwSw = max(lumaNw, lumaSw);
	lumaNe += 1.0/384.0;
	float lumaMinNwSw = min(lumaNw, lumaSw);

	float lumaMaxNeSe = max(lumaNe, lumaSe);
	float lumaMinNeSe = min(lumaNe, lumaSe);

	float lumaMax = max(lumaMaxNeSe, lumaMaxNwSw);
	float lumaMin = min(lumaMinNeSe, lumaMinNwSw);

	float lumaMaxScaled = lumaMax * EdgeThreshold;

	float lumaMinM = min(lumaMin, lumaM);
	float lumaMaxScaledClamped = max(EdgeThresholdMin, lumaMaxScaled);
	float lumaMaxM = max(lumaMax, lumaM);
	float dirSwMinusNe = lumaSw - lumaNe;
	float lumaMaxSubMinM = lumaMaxM - lumaMinM;
	float dirSeMinusNw = lumaSe - lumaNw;
	if(lumaMaxSubMinM < lumaMaxScaledClamped) return rgbyM;

	float2 dir;
	dir.x = dirSwMinusNe + dirSeMinusNw;
	dir.y = dirSwMinusNe - dirSeMinusNw;

	float2 dir1 = normalize(dir.xy);
	float4 rgbyN1 = FxaaTexTop(tex, pos.xy - dir1 * RcpFrameOpt.zw);
	float4 rgbyP1 = FxaaTexTop(tex, pos.xy + dir1 * RcpFrameOpt.zw);

	float dirAbsMinTimesC = min(abs(dir1.x), abs(dir1.y)) * EdgeSharpness;
	float2 dir2 = clamp(dir1.xy / dirAbsMinTimesC, -2.0, 2.0);

	float4 rgbyN2 = FxaaTexTop(tex, pos.xy - dir2 * RcpFrameOpt2.zw);
	float4 rgbyP2 = FxaaTexTop(tex, pos.xy + dir2 * RcpFrameOpt2.zw);

	float4 rgbyA = rgbyN1 + rgbyP1;
	float4 rgbyB = ((rgbyN2 + rgbyP2) * 0.25) + (rgbyA * 0.25);

	bool twoTap = (rgbyB.w < lumaMin) || (rgbyB.w > lumaMax);
	if(twoTap) rgbyB.xyz = rgbyA.xyz * 0.5;
	return rgbyB;
}

sampler Sampler	: register(s0);

struct PS_INPUT
{
	float2 UV	: TEXCOORD0;
};

float4 Main( PS_INPUT In ) : COLOR
{
	const float4	RcpFrameOpt		= RTDims2 * SubpixelN;
	const float4	RcpFrameOpt2	= RTDims2 * 2.0;

	return float4( FxaaPixelShader( In.UV, Sampler, RTDims.xy, RcpFrameOpt, RcpFrameOpt2 ).rgb, 1.0f );
}