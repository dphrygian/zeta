#version 120

uniform vec4 RTDims;
uniform vec4 RTDims2;

float SubpixelN		= 0.33f;
float EdgeSharpness	= 8.0f;
float EdgeThreshold	= 0.125f;
float EdgeThresholdMin	= 0.05f;

float GetLuma( vec4 Color )
{
	return Color.a;
}

#define FxaaTexTop(t, p) texture2D(t, p)
#define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r))

vec4 FxaaPixelShader( vec2 pos, sampler2D tex, vec2 RcpFrame, vec4 RcpFrameOpt, vec4 RcpFrameOpt2 )
{
	float lumaNw = GetLuma(FxaaTexOff(tex, pos, vec2(-1,-1), RcpFrame.xy));
	float lumaSw = GetLuma(FxaaTexOff(tex, pos, vec2(-1, 1), RcpFrame.xy));
	float lumaNe = GetLuma(FxaaTexOff(tex, pos, vec2( 1,-1), RcpFrame.xy));
	float lumaSe = GetLuma(FxaaTexOff(tex, pos, vec2( 1, 1), RcpFrame.xy));

	vec4 rgbyM = FxaaTexTop(tex, pos.xy);
	float lumaM = rgbyM.w;

	float lumaMaxNwSw = max(lumaNw, lumaSw);
	lumaNe += 1.0/384.0;
	float lumaMinNwSw = min(lumaNw, lumaSw);

	float lumaMaxNeSe = max(lumaNe, lumaSe);
	float lumaMinNeSe = min(lumaNe, lumaSe);

	float lumaMax = max(lumaMaxNeSe, lumaMaxNwSw);
	float lumaMin = min(lumaMinNeSe, lumaMinNwSw);

	float lumaMaxScaled = lumaMax * EdgeThreshold;

	float lumaMinM = min(lumaMin, lumaM);
	float lumaMaxScaledClamped = max(EdgeThresholdMin, lumaMaxScaled);
	float lumaMaxM = max(lumaMax, lumaM);
	float dirSwMinusNe = lumaSw - lumaNe;
	float lumaMaxSubMinM = lumaMaxM - lumaMinM;
	float dirSeMinusNw = lumaSe - lumaNw;
	if(lumaMaxSubMinM < lumaMaxScaledClamped) return rgbyM;

	vec2 dir;
	dir.x = dirSwMinusNe + dirSeMinusNw;
	dir.y = dirSwMinusNe - dirSeMinusNw;

	vec2 dir1 = normalize(dir.xy);
	vec4 rgbyN1 = FxaaTexTop(tex, pos.xy - dir1 * RcpFrameOpt.zw);
	vec4 rgbyP1 = FxaaTexTop(tex, pos.xy + dir1 * RcpFrameOpt.zw);

	float dirAbsMinTimesC = min(abs(dir1.x), abs(dir1.y)) * EdgeSharpness;
	vec2 dir2 = clamp(dir1.xy / dirAbsMinTimesC, -2.0, 2.0);

	vec4 rgbyN2 = FxaaTexTop(tex, pos.xy - dir2 * RcpFrameOpt2.zw);
	vec4 rgbyP2 = FxaaTexTop(tex, pos.xy + dir2 * RcpFrameOpt2.zw);

	vec4 rgbyA = rgbyN1 + rgbyP1;
	vec4 rgbyB = ((rgbyN2 + rgbyP2) * 0.25) + (rgbyA * 0.25);

	bool twoTap = (rgbyB.w < lumaMin) || (rgbyB.w > lumaMax);
	if(twoTap) rgbyB.xyz = rgbyA.xyz * 0.5;
	return rgbyB;
}

uniform sampler2D Texture0;

varying vec2	PassUV;

vec2 FixUV( vec2 UV )
{
	return vec2( UV.x, 1.0f - UV.y );
}

void main()
{
	vec4	RcpFrameOpt		= RTDims2 * SubpixelN;
	vec4	RcpFrameOpt2	= RTDims2 * 2.0;

	gl_FragColor = vec4( FxaaPixelShader( FixUV( PassUV ), Texture0, RTDims.xy, RcpFrameOpt, RcpFrameOpt2 ).rgb, 1.0f );
}