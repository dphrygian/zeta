#version 120

// ****************************************************************
// BEGIN FOG

uniform mat4	FogColors;			// Set from code, ordered near-lo/far-lo/near-hi/far-hi
uniform vec4	FogNearFarCurve;	// Set from code: x = near pin, y = far pin (unused), z = 1/(y-x), w = exponent
uniform vec4	FogLoHiCurve;		// Set from code: x = lo pin, y = fog height exp (HACKHACK), z = 1/(hi pin-x), w = exponent
uniform vec4	FogParams;			// Set from code: x = near, y = 1/(far-near), z = emissive max, w = exposure scalar
uniform vec4	HeightFogParams;	// Set from code: x = low fog height, y = 1/fog height range, z = low fog exponent, w = high fog exponent
uniform vec4	RegionFogScalar;	// Set from code: linear space multiplier on fog color/opacity

// Scales and clamps distance to [0,1] based on 
float ScaleDistance( float InDistance )
{
	float ScaledDistance = ( InDistance - FogParams.x ) * FogParams.y;
	return clamp( ScaledDistance, 0.0f, 1.0f );
}

float GetFogT( float Distance, float WSZ )
{
	float	FogHeight	= pow( clamp( ( WSZ - HeightFogParams.x ) * HeightFogParams.y, 0.0f, 1.0f ), FogLoHiCurve.y );
	float	FogExponent	= mix( HeightFogParams.z, HeightFogParams.w, FogHeight );

	return pow( ScaleDistance( Distance ), FogExponent );
}

vec4 SampleFog( float NearFar, float LoHi )
{
	float	NearFarAlpha	= pow( clamp( ( NearFar -	FogNearFarCurve.x ) *	FogNearFarCurve.z, 0.0f, 1.0f ),	FogNearFarCurve.w );
	float	LoHiAlpha		= pow( clamp( ( LoHi -		FogLoHiCurve.x ) *		FogLoHiCurve.z, 0.0f, 1.0f ),		FogLoHiCurve.w );
	// NOTE: GLSL uses column-major indexing; FogColors is transposed in code when using OpenGL so this works as expected
	vec4	FogLo			= mix( FogColors[0], FogColors[1], NearFarAlpha );
	vec4	FogHi			= mix( FogColors[2], FogColors[3], NearFarAlpha );
	vec4	Fog				= mix( FogLo, FogHi, LoHiAlpha );

	return Fog;
}

vec4 GetFogAtDistance( float Distance, float SunTerm )
{
	vec4	GlobalFog	= SampleFog( Distance, SunTerm );
	vec4	RegionFog	= GlobalFog * RegionFogScalar;

	return RegionFog;
}

vec4 GetFog_Deferred( float Distance, float WSZ, float SunTerm )
{
	float	FogT	= GetFogT( Distance, WSZ );

	return GetFogAtDistance( FogT, SunTerm );
}

// END FOG
// ****************************************************************

float skDepthThresholdLo	= 0.10f;
float skDepthThresholdHi	= 0.20f;
float skNormalThresholdLo	= 0.05f;
float skNormalThresholdHi	= 0.25f;

uniform mat4	InvVPMatrix;
uniform vec4	EyePosition;

uniform vec4	RTDims;
uniform vec4	RTDims2;

uniform vec4	ClipValues;

uniform vec4	BackColor;
uniform vec4	EdgeColor;

uniform sampler2D Texture0;
uniform sampler2D Texture1;

uniform vec4	SunVector;	// Used as vec3

varying vec2	PassUV;

vec2 FixUV( vec2 UV )
{
	return vec2( UV.x, 1.0f - UV.y );
}

float SmoothStep( float Lo, float Hi, float X )
{
	float T = clamp( ( X - Lo ) / ( Hi - Lo ), 0.0f, 1.0f );
    return T * T * (3.0f - 2.0f * T);
}

float GetLinearDepth( float Z )
{
	return ClipValues.x / ( Z * ClipValues.z - ClipValues.y );
}

vec4 GetWSPos( vec2 UV, float Depth )
{
	vec2 FixedUV	= ( UV * 2.0f ) - 1.0f;
	vec4 VPos4		= vec4( FixedUV.x, FixedUV.y, Depth, 1.0f );	// ROSANOTE: *Don't* negate FixedUV.y, it's already flipped in GLSL
	vec4 WSPos		= VPos4 * InvVPMatrix;
	return WSPos / WSPos.w;
}

float NonZeroSign( float x )
{
	return ( step( 0.0f, x ) * 2.0f ) - 1.0f;
}

vec3 GetInvStereographicProjection( vec2 Normal, float NormalZSign )
{
	float XXYY	= dot( Normal.xy, Normal.xy );
	float Denom	= 1.0f / ( 1.0f + XXYY );
	return vec3( 2.0f * Normal.xy * Denom, NormalZSign * abs( ( XXYY - 1.0f ) * Denom ) );
}

vec3 SampleAndUnpackNormal( sampler2D Sampler, vec2 UV )
{
	vec4	NormalSpec		= texture2D( Sampler, UV );
	vec4	NormalUnpack	= ( NormalSpec * 2.0f ) - 1.0f;
	float	NormalZSign		= NonZeroSign( NormalUnpack.z );
	vec3	WSNormal		= GetInvStereographicProjection( NormalUnpack.xy, NormalZSign );
	return WSNormal;
}

void main()
{
	vec2	FixedUV	= FixUV( PassUV );
	
	vec2	NW_UV	= FixedUV + vec2( RTDims2.x, RTDims2.y );
	vec2	NE_UV	= FixedUV + vec2( RTDims.x,  RTDims2.y );
	vec2	SW_UV	= FixedUV + vec2( RTDims2.x, RTDims.y );
	vec2	SE_UV	= FixedUV + vec2( RTDims.x,  RTDims.y );

	float	DepthZ	= texture2D( Texture1, FixedUV ).r;
	float	DepthA	= GetLinearDepth( DepthZ );
	float	DepthB	= GetLinearDepth( texture2D( Texture1, NW_UV ).r );
	float	DepthC	= GetLinearDepth( texture2D( Texture1, NE_UV ).r );
	float	DepthD	= GetLinearDepth( texture2D( Texture1, SW_UV ).r );
	float	DepthE	= GetLinearDepth( texture2D( Texture1, SE_UV ).r );
	float	DepthF	=
					max(
						max(
							abs( DepthB - DepthA ),
							abs( DepthC - DepthA ) 
						),
						max(
							abs( DepthD - DepthA ),
							abs( DepthE - DepthA )
						)
					);

	vec3	NormalA	= SampleAndUnpackNormal( Texture0, FixedUV );
	vec3	NormalB	= SampleAndUnpackNormal( Texture0, NW_UV );
	vec3	NormalC	= SampleAndUnpackNormal( Texture0, NE_UV );
	vec3	NormalD	= SampleAndUnpackNormal( Texture0, SW_UV );
	vec3	NormalE	= SampleAndUnpackNormal( Texture0, SE_UV );
	float	NormalF	=
					( 1.0f - dot( NormalB, NormalA ) ) +
					( 1.0f - dot( NormalC, NormalA ) ) + 
					( 1.0f - dot( NormalD, NormalA ) ) +
					( 1.0f - dot( NormalE, NormalA ) );

	vec4	WSPos		= GetWSPos( FixedUV, DepthZ );
	vec3	ViewToPos	= WSPos.xyz - EyePosition.xyz;
	float	Distance	= length( ViewToPos );
	vec3	ViewToPosN	= ViewToPos / Distance;
	float	SunValue	= 0.5f * ( 1.0f + dot( ViewToPosN, SunVector.xyz ) );
	float	SunValueT	= SunValue * SunValue;
	vec4	Fog			= GetFog_Deferred( Distance, WSPos.z, SunValueT );
	float	FogTerm		= 1.0f - Fog.a;
	
	float	DepthTerm	= SmoothStep( skDepthThresholdLo, skDepthThresholdHi, DepthF / DepthA );
	
	float	NormalTerm	= SmoothStep( skNormalThresholdLo, skNormalThresholdHi, NormalF );

	gl_FragColor = mix( BackColor, EdgeColor, FogTerm * max( DepthTerm, NormalTerm ) );
}
