#version 120

uniform mat4	InvVPMatrix;

uniform sampler2D Texture0;	// FogDepthRGBA
uniform sampler2D Texture1;	// SceneDepth

uniform	vec4	FogMeshColor;
uniform	vec4	FogMeshParams;

varying vec4	PassPositionSS;
varying vec4	PassVPos;

void Clip( float F )
{
	if( F < 0.0f )
	{
		discard;
	}
}

vec4 GetWSPos( vec2 UV, float Depth )
{
	vec2 FixedUV	= ( UV * 2.0f ) - 1.0f;
	vec4 VPos4		= vec4( FixedUV.x, FixedUV.y, Depth, 1.0f );	// ROSANOTE: *Don't* negate FixedUV.y, it's already flipped in GLSL
	vec4 WSPos		= VPos4 * InvVPMatrix;
	return WSPos / WSPos.w;
}

vec2 FixUV( vec2 UV )
{
	return vec2( UV.x, 1.0f - UV.y );
}

float DecodeFloatRGBA( vec4 RGBA )
{
	return dot( RGBA, vec4( 1.0f, 1.0f / 255.0f, 1.0f / 65025.0f, 1.0f / 16581375.0f ) );
}

void main()
{
	// Fix VPos
	vec2	NormVPos	= PassVPos.xy / PassVPos.w;
	vec2	FixedUV		= FixUV( NormVPos );

	vec4	FogDepthRBGA	= texture2D( Texture0, FixedUV );
	float	FogNearDepth	= DecodeFloatRGBA( FogDepthRBGA );
	float	FogFarDepth		= PassPositionSS.z / PassPositionSS.w;
	float	SceneDepth		= texture2D( Texture1, FixedUV ).r;

	Clip( SceneDepth - FogNearDepth );

	float	UsingFarDepth	= min( FogFarDepth, SceneDepth );

	vec3	FogNearWSPos	= GetWSPos( FixedUV, FogNearDepth ).xyz;
	vec3	FogFarWSPos		= GetWSPos( FixedUV, UsingFarDepth ).xyz;
	float	FogDistance		= length( FogFarWSPos - FogNearWSPos );
	float	FogFalloff		= pow( clamp( FogDistance * FogMeshParams.x, 0.0f, 1.0f ), FogMeshParams.y );

	float	FogAlpha		= FogFalloff * FogMeshColor.a;

	gl_FragColor = vec4( 1.0f, 1.0f, 1.0f, FogAlpha );
}
