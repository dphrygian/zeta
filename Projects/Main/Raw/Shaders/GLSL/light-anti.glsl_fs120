#version 120

uniform sampler2D Texture0;	// Normal (G-buffer)
uniform sampler2D Texture1;	// Depth (G-buffer)

uniform mat4	InvVPMatrix;
uniform	vec4	AntiLightPosition;
uniform	vec4	AntiLightColor;

varying vec4	PassVPos;

vec4 GetWSPos( vec2 UV, float Depth )
{
	vec2 FixedUV	= ( UV * 2.0f ) - 1.0f;
	vec4 VPos4		= vec4( FixedUV.x, FixedUV.y, Depth, 1.0f );	// ROSANOTE: *Don't* negate FixedUV.y, it's already flipped in GLSL
	vec4 WSPos		= VPos4 * InvVPMatrix;
	return WSPos / WSPos.w;
}

vec2 FixUV( vec2 UV )
{
	return vec2( UV.x, 1.0f - UV.y );
}

float NonZeroSign( float x )
{
	return ( step( 0.0f, x ) * 2.0f ) - 1.0f;
}

vec3 GetInvStereographicProjection( vec2 Normal, float NormalZSign )
{
	float XXYY	= dot( Normal.xy, Normal.xy );
	float Denom	= 1.0f / ( 1.0f + XXYY );
	return vec3( 2.0f * Normal.xy * Denom, NormalZSign * abs( ( XXYY - 1.0f ) * Denom ) );
}

void main()
{
	// Fix VPos
	vec2	NormVPos	= PassVPos.xy / PassVPos.w;
	vec2	FixedUV		= FixUV( NormVPos );

	vec4	NormalSpec		= texture2D( Texture0, FixedUV );
	vec4	NormalUnpack	= ( NormalSpec * 2.0f ) - 1.0f;
	float	NormalZSign		= NonZeroSign( NormalUnpack.z );
	vec3	WSNormal		= GetInvStereographicProjection( NormalUnpack.xy, NormalZSign );

	float	Depth			= texture2D( Texture1, FixedUV ).r;
	vec3	WSPos			= GetWSPos( FixedUV, Depth ).xyz;

	vec3	PosToLight		= AntiLightPosition.xyz - WSPos;

	vec3	AntiLight		= vec3( AntiLightColor.r );
	
	float	Dist			= sqrt( dot( PosToLight, PosToLight ) );
	float	LinearFalloff	= clamp( Dist / AntiLightColor.a, 0.0f, 1.0f );
	float	Falloff			= LinearFalloff * LinearFalloff;

	gl_FragColor = vec4( 1.0f - clamp( AntiLight * ( 1.0f - Falloff ), 0.0f, 1.0f ), 1.0f );
}