#version 120

uniform mat4	InvVPMatrix;

uniform sampler2D Texture0;	// LightDepthRGBA
uniform sampler2D Texture1;	// SceneDepth

uniform	vec4	LightPosition;
uniform	vec4	LightColor;
uniform vec4	FogLightParams;

varying vec4	PassPositionSS;
varying vec4	PassVPos;

void Clip( float F )
{
	if( F < 0.0f )
	{
		discard;
	}
}

vec4 GetWSPos( vec2 UV, float Depth )
{
	vec2 FixedUV	= ( UV * 2.0f ) - 1.0f;
	vec4 VPos4		= vec4( FixedUV.x, FixedUV.y, Depth, 1.0f );	// ROSANOTE: *Don't* negate FixedUV.y, it's already flipped in GLSL
	vec4 WSPos		= VPos4 * InvVPMatrix;
	return WSPos / WSPos.w;
}

vec2 FixUV( vec2 UV )
{
	return vec2( UV.x, 1.0f - UV.y );
}

float DecodeFloatRGBA( vec4 RGBA )
{
	return dot( RGBA, vec4( 1.0f, 1.0f / 255.0f, 1.0f / 65025.0f, 1.0f / 16581375.0f ) );
}

vec3 NearestPointOnSegment( vec3 SegmentA, vec3 SegmentB, vec3 Point )
{
	vec3	Extent			= SegmentB - SegmentA;
	float	ExtentLengthSq	= dot( Extent, Extent );

	vec3	Offset			= Point - SegmentA;
	float	OffsetDot		= dot( Offset, Extent );

	float	T				= clamp( OffsetDot / ExtentLengthSq, 0.0f, 1.0f );
	return SegmentA + Extent * T;
}

void main()
{
	// Fix VPos
	vec2	NormVPos	= PassVPos.xy / PassVPos.w;
	vec2	FixedUV		= FixUV( NormVPos );

	vec4	LightDepthRBGA	= texture2D( Texture0, FixedUV );
	float	LightNearDepth	= DecodeFloatRGBA( LightDepthRBGA );
	float	LightFarDepth	= PassPositionSS.z / PassPositionSS.w;
	float	SceneDepth		= texture2D( Texture1, FixedUV ).r;
	
	Clip( SceneDepth - LightNearDepth );
	
	float	UsingFarDepth	= min( LightFarDepth, SceneDepth );

	vec3	LightNearWSPos	= GetWSPos( FixedUV, LightNearDepth ).xyz;
	vec3	LightFarWSPos	= GetWSPos( FixedUV, UsingFarDepth ).xyz;
	float	FogDistance		= length( LightFarWSPos - LightNearWSPos );
	float	FogFalloff		= clamp( FogDistance / ( 2.0f * LightColor.a ), 0.0f, 1.0f );

	vec3	NearestPoint	= NearestPointOnSegment( LightNearWSPos, LightFarWSPos, LightPosition.xyz );
	float	Dist			= length( NearestPoint - LightPosition.xyz );
	float	LinearFalloff	= clamp( 1.0f - ( Dist / LightColor.a ), 0.0f, 1.0f );
	float	LightFalloff	= pow( LinearFalloff, 4.0f );
	
	float	FogLight		= LightFalloff * FogFalloff * FogLightParams.x;

	gl_FragColor = FogLightParams.y * vec4( FogLight * LightColor.rgb, 1.0f );
}
