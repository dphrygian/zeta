#version 120

// ****************************************************************
// BEGIN ANIMATED
uniform mat4 BoneMatrices[32];

// To transform a direction instead of a point, make sure Point.w = 0
vec4 ApplyBones( vec4 Point, vec4 Weights, ivec4 Indices )
{
	vec4 TransformedPoint =
		( Point * BoneMatrices[ Indices.x ] ) * Weights.x +
		( Point * BoneMatrices[ Indices.y ] ) * Weights.y +
		( Point * BoneMatrices[ Indices.z ] ) * Weights.z +
		( Point * BoneMatrices[ Indices.w ] ) * Weights.w;

	// Badness can creep in if we don't do this. I don't exactly understand why.
	TransformedPoint.w = Point.w;

	return TransformedPoint;
}
// END ANIMATED
// ****************************************************************

uniform mat4	WVP;
uniform mat4	WorldMatrix;
uniform vec4	ReflectVector;

attribute vec4	InPosition;
attribute vec3	InNormal;
attribute vec4	InTangent;
attribute vec2	InUV;
attribute vec4	InBoneWeights;
attribute vec4	InBoneIndices;

varying vec2	PassUV;
varying vec4	PassPositionSS;
varying vec3	PassNormalWS;
varying vec4	PassTangentWS;

vec3 LeftyModeReflect( vec3 Normal )
{
	vec3 Reflected = reflect( Normal, ReflectVector.xyz );
	return mix( Normal, Reflected, ReflectVector.w );
}

// For reflecting a tangent with the bitangent sign
vec4 LeftyModeReflect( vec4 Tangent )
{
	return vec4( LeftyModeReflect( Tangent.xyz ), mix( Tangent.w, -Tangent.w, ReflectVector.w ) );
}

void main()
{
	ivec4	BoneIndices		= ivec4( InBoneIndices );
	vec4	SkinnedPosition	= ApplyBones( InPosition, InBoneWeights, BoneIndices );
	vec4	Normal4			= vec4( InNormal, 0.0f );
	vec4	SkinnedNormal	= ApplyBones( Normal4, InBoneWeights, BoneIndices );
	vec4	Tangent4		= vec4( InTangent.xyz, 0.0f );
	vec4	SkinnedTangent	= ApplyBones( Tangent4, InBoneWeights, BoneIndices );

	gl_Position		= SkinnedPosition * WVP;
	PassUV			= InUV;
	PassPositionSS	= gl_Position;
	PassNormalWS	= LeftyModeReflect( ( SkinnedNormal * WorldMatrix ).xyz );
	PassTangentWS	= LeftyModeReflect( vec4( ( SkinnedTangent * WorldMatrix ).xyz, InTangent.w ) );
}
